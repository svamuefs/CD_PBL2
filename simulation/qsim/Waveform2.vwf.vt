// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/10/2023 21:42:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          display_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module display_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] binary_code;
reg enable;
// wires                                               
wire [6:0] digitOut;

// assign statements (if any)                          
display_decoder i1 (
// port map - connection between master ports and signals/registers   
	.binary_code(binary_code),
	.digitOut(digitOut),
	.enable(enable)
);
initial 
begin 
#1000000 $finish;
end 
// binary_code[ 3 ]
initial
begin
	repeat(6)
	begin
		binary_code[3] = 1'b0;
		binary_code[3] = #80000 1'b1;
		# 80000;
	end
	binary_code[3] = 1'b0;
end 
// binary_code[ 2 ]
initial
begin
	repeat(12)
	begin
		binary_code[2] = 1'b0;
		binary_code[2] = #40000 1'b1;
		# 40000;
	end
	binary_code[2] = 1'b0;
end 
// binary_code[ 1 ]
always
begin
	binary_code[1] = 1'b0;
	binary_code[1] = #20000 1'b1;
	#20000;
end 
// binary_code[ 0 ]
always
begin
	binary_code[0] = 1'b0;
	binary_code[0] = #10000 1'b1;
	#10000;
end 

// enable
initial
begin
	enable = 1'b1;
	enable = #500000 1'b0;
end 
endmodule

